`timescale 1ns / 1ps
//Carry Look Ahead Adder (CLA)
module CLA_8bit(
       input[7:0] A, B, 
       input Cin,
       output[7:0] Sum, 
       output Cout
    );
    //Carry-propogate (P) and Carry-generate (G)
    wire[7:0] P, G, Carry;
    wire[8:0] C;
    assign C[0] = Cin;

    // Generate P, G, C, and the Full Adder
     genvar i;
     generate
            for (i=0; i<8; i=i+1) begin
                assign P[i] = A[i] ^ B[i];
                assign G[i] = A[i] & B[i];
                assign C[i+1] = G[i] | (P[i] & C[i]);
                //assign Sum[i] = P[i] ^ C[i]; This code is redundant: already being used in full adder sum logic
                //       Sum[i] = (A[i] ^ B[i]) ^ C[i];
                Full_Adder ACT(
                    .A(A[i]),
                    .B(B[i]),
                    .Cin(C[i]),
                    .Sum(Sum[i]), 
                    .Count(Carry[i])
                );
                
            end
    endgenerate
    assign Cout = C[8];
endmodule
